services:
    gateway:
        image: nginx:1.19.8-alpine
        ports:
            - 8085:8085
        networks:
            - backend
        volumes:
            - ./gateway/nginx_prod.conf:/etc/nginx/nginx.conf
            - ./gateway/api_gateway_prod.conf:/etc/nginx/api_gateway.conf
            - ./gateway/certificate.pem:/etc/nginx/ssl/certificate.pem
            - ./gateway/certificate-key.pem:/etc/nginx/ssl/certificate-key.pem

    magygram-app:
        image: magygram-app
        networks:
            - backend
        build:
            context: ./clientapp/MagygramApp
            dockerfile: Dockerfile
        ports:
            - 3000:3000

    user-service:
        image: user-service
        build:
            context: ./user-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - JAEGER_SERVICE_NAME=user-service
            - JAEGER_AGENT_HOST=tracing
            - JAEGER_AGENT_PORT=6831     
            - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
            - JAEGER_SAMPLER_TYPE=const
            - JAEGER_SAMPLER_PARAM=1
            - IS_PRODUCTION=true

    auth-service:
        image: auth-service
        build:
            context: ./auth-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - JAEGER_SERVICE_NAME=auth-service
            - JAEGER_AGENT_HOST=tracing
            - JAEGER_AGENT_PORT=6831     
            - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
            - JAEGER_SAMPLER_TYPE=const
            - JAEGER_SAMPLER_PARAM=1
            - IS_PRODUCTION=true

    media-service:
        image: media-service
        build:
            context: ./media-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - JAEGER_SERVICE_NAME=media-service
            - JAEGER_AGENT_HOST=tracing
            - JAEGER_AGENT_PORT=6831     
            - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
            - JAEGER_SAMPLER_TYPE=const
            - JAEGER_SAMPLER_PARAM=1
            - IS_PRODUCTION=true

    post-service:
        image: post-service
        build:
            context: ./post-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - JAEGER_SERVICE_NAME=post-service
            - JAEGER_AGENT_HOST=tracing
            - JAEGER_AGENT_PORT=6831     
            - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
            - JAEGER_SAMPLER_TYPE=const
            - JAEGER_SAMPLER_PARAM=1
            - IS_PRODUCTION=true

    story-service:
        image: story-service
        build:
            context: ./story-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            IS_PRODUCTION: "true"

    relationship-service:
        image: relationship-service
        build:
            context: ./relationship-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - JAEGER_SERVICE_NAME=relationship-service
            - JAEGER_AGENT_HOST=tracing
            - JAEGER_AGENT_PORT=6831     
            - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
            - JAEGER_SAMPLER_TYPE=const
            - JAEGER_SAMPLER_PARAM=1
            - IS_PRODUCTION=true

    message-service:
        image: message-service
        ports:
            - 467:467
        build:
            context: ./message-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            IS_PRODUCTION: "true"

    request-service:
        image: request-service
        build:
            context: ./request-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            IS_PRODUCTION: "true"

    mongo-db:
        image: mongo
        restart: always
        networks:
            - backend
        volumes:
            # if you wish to setup additional user accounts specific per DB or with different roles you can use following entry point
            - "$PWD/mongo-entrypoint/:/docker-entrypoint-initdb.d/"

    neo4j-db:
        image: neo4j:latest
        networks:
            - backend
        environment:
            NEO4J_AUTH: neo4j/neo4jdb

    redis-db:
        image: redis
        networks:
            - backend
    
    tracing:
        image: jaegertracing/all-in-one
        container_name: jaeger
        ports:
            - "6831:6831/udp"
            - "6832:6832/udp"
            - "16686:16686"
            - "14268:14268"
            - "14250:14250"
        networks:
            - backend

volumes:
    mongodbdata:

networks:
    backend:
        name: magygram
        driver: bridge
