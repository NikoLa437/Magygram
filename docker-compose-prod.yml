services:
    gateway:
        image: nginx:1.19.8-alpine
        ports:
            - 8085:8085
        networks:
            - backend
        volumes:
            - ./gateway/nginx_prod.conf:/etc/nginx/nginx.conf
            - ./gateway/api_gateway_prod.conf:/etc/nginx/api_gateway.conf
            - ./gateway/certificate.pem:/etc/nginx/ssl/certificate.pem
            - ./gateway/certificate-key.pem:/etc/nginx/ssl/certificate-key.pem

    magygram-app:
        image: magygram-app
        networks:
            - backend
        build:
            context: ./clientapp/MagygramApp
            dockerfile: Dockerfile
        ports:
            - 3000:3000

    magygram-agent-app:
        image: magygram-agent-app
        networks:
            - backend
        build:
            context: ./clientapp/AgentApp
            dockerfile: Dockerfile
        ports:
            - 3001:3000

    user-service:
        image: user-service
        build:
            context: ./user-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    auth-service:
        image: auth-service
        build:
            context: ./auth-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    media-service:
        image: media-service
        build:
            context: ./media-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    post-service:
        image: post-service
        build:
            context: ./post-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    story-service:
        image: story-service
        build:
            context: ./story-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    relationship-service:
        image: relationship-service
        build:
            context: ./relationship-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    message-service:
        image: message-service
        ports:
            - 467:467
        build:
            context: ./message-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    request-service:
        image: request-service
        build:
            context: ./request-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    ads-service:
        image: ads-service
        build:
            context: ./ads-service
            dockerfile: Dockerfile
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    magy-agent:
        image: magy-agent
        build:
            context: ./magy-agent
            dockerfile: Dockerfile
        ports:
            - 470:470
        networks:
            - backend
        environment:
            - IS_PRODUCTION=true

    mongo-db:
        image: mongo
        restart: always
        ports:
            - 27020:27017
        networks:
            - backend
        volumes:
            # if you wish to setup additional user accounts specific per DB or with different roles you can use following entry point
            - "$PWD/mongo-entrypoint/:/docker-entrypoint-initdb.d/"

    neo4j-db:
        image: neo4j:latest
        networks:
            - backend
        environment:
            NEO4J_AUTH: neo4j/neo4jdb

    redis-db:
        image: redis
        networks:
            - backend

    postgres-db:
        image: postgres:13
        restart: always
        networks:
            - backend
        environment:
            POSTGRES_PASSWORD: root
            POSTGRES_USER: postgres
            POSTGRES_DB: magy-agent
        volumes:
            - postgres:/var/lib/postgresql/data

    xml-db:
        image: existdb/existdb:latest
        ports:
            - 8081:8080
            - 8443:8443
        networks:
            - backend

    tracing:
        image: jaegertracing/all-in-one
        container_name: jaeger
        ports:
            - "6831:6831/udp"
            - "6832:6832/udp"
            - "16686:16686"
            - "14268:14268"
            - "14250:14250"
        networks:
            - backend

    prometheus:
        image: prom/prometheus
        container_name: prometheus
        ports:
            - 9090:9090
        restart: unless-stopped
        volumes:
            - ./prometheus:/etc/prometheus
            - prometheus-data:/prometheus
        command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
        networks:
            - backend

    grafana:
        image: grafana/grafana:8.0.4
        container_name: grafana
        volumes:
            - grafana-data:/var/lib/grafana
            - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        environment:
            - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
            - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
            - GF_USERS_ALLOW_SIGN_UP=false
        restart: unless-stopped
        ports:
            - 3031:3000
        networks:
            - backend

volumes:
    postgres:
    mongodbdata:
    prometheus-data:
    grafana-data:

networks:
    backend:
        name: magygram
        driver: bridge
